{"version":3,"sources":["helpers.js","components/Planet.js","components/Sun.js","components/LoadingBody.js","App.js","index.js"],"names":["getPosition","aphelion","randomAngle","distanceScale","distanceOffset","Math","cos","sin","Planet","props","group","useRef","mesh","size","realisticScale","diameter","SIZE_SCALE","useLoader","THREE","image","texture","position","index","RANDOM_ANGLE","DISTANCE_SCALE","DISTANCE_OFFSET","useFrame","current","rotation","y","orbitalPeriod","rotationPeriod","ref","orbitalInclination","axialTilt","castShadow","receiveShadow","attach","args","map","rings","ring","key","max","min","side","color","Sun","SUN_DIAMETER","LoadingBody","extend","OrbitControls","Controls","useThree","gl","camera","useRender","update","domElement","ReactDOM","render","useState","setToRealisticScale","constants","className","onClick","shadowMap","intensity","enableZoom","enableDamping","dampingFactor","rotateSpeed","fallback","data","planets","planet","random","PI","name","document","getElementById"],"mappings":"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","file":"static/js/main.edbe2340.chunk.js","sourcesContent":["export function getPosition(aphelion, randomAngle, distanceScale, distanceOffset) {\n\tconst x = Math.cos(randomAngle) * (aphelion + distanceOffset);\n\tconst z = Math.sin(randomAngle) * (aphelion + distanceOffset);\n\n\treturn [x * distanceScale, 0, z * distanceScale];\n}","import React, { useRef } from 'react';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { getPosition } from '../helpers';\n\nexport default function Planet(props) {\n\tconst group = useRef();\n\tconst mesh = useRef();\n\n\tconst size = props.realisticScale ? [props.diameter * props.SIZE_SCALE, 32, 32] : [1, 32, 32];\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/${props.image}`]);\n\n\tconst position = getPosition(props.realisticScale ? props.aphelion : (props.index * 100), props.realisticScale ? props.RANDOM_ANGLE : 0, props.DISTANCE_SCALE, props.DISTANCE_OFFSET);\n\n\tuseFrame(() => {\n\t\tif (props.realisticScale) {\n\t\t\tgroup.current.rotation.y += 1 / props.orbitalPeriod;\n\t\t\tmesh.current.rotation.y += 1 / props.rotationPeriod;\n\t\t}\n\t});\n\n\treturn (\n\t\t<group ref={group} rotation={new THREE.Euler(props.orbitalInclination, 0, 0)}>\n\t\t\t<mesh\n\t\t\t\tref={mesh}\n\t\t\t\tposition={position}\n\t\t\t\trotation={new THREE.Euler(props.axialTilt, 0, 0)}\n\t\t\t\tcastShadow={props.realisticScale}\n\t\t\t\treceiveShadow={props.realisticScale}>\n\t\t\t\t<sphereBufferGeometry attach='geometry' args={size} />\n\t\t\t\t<meshStandardMaterial attach='material' map={texture} />\n\t\t\t</mesh>\n\t\t\t{props.rings && props.rings.map((ring, index) => {\n\t\t\t\tconst NINETY_DEGREES_IN_EULER = 1.5707963;\n\n\t\t\t\treturn (\n\t\t\t\t\t<mesh\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\trotation={new THREE.Euler(props.axialTilt + NINETY_DEGREES_IN_EULER, 0, 0)}\n\t\t\t\t\t\tposition={position}\n\t\t\t\t\t\treceiveShadow>\n\t\t\t\t\t\t<ringBufferGeometry attach='geometry' args={[ring.max * props.SIZE_SCALE, ring.min * props.SIZE_SCALE, 32]} />\n\t\t\t\t\t\t<meshPhysicalMaterial attach='material' side={THREE.DoubleSide} color={props.color} />\n\t\t\t\t\t</mesh>\n\t\t\t\t)\n\t\t\t})}\n\t\t</group>\n\t);\n}","import React from 'react';\nimport { useLoader } from 'react-three-fiber';\nimport * as THREE from 'three';\n\nexport default function Sun({ realisticScale, SIZE_SCALE, SUN_DIAMETER }) {\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/sun.jpg`]);\n\tconst size = realisticScale ? [SUN_DIAMETER * SIZE_SCALE, 32, 32] : [1, 32, 32];\n\n\treturn (\n\t\t<mesh position={[0, 0, 0]}>\n\t\t\t<sphereBufferGeometry attach='geometry' args={size} />\n\t\t\t<meshBasicMaterial attach='material' map={texture} />\n\t\t\t{realisticScale && <pointLight castShadow color='white' />}\n\t\t</mesh>\n\t);\n}","import React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport { getPosition } from '../helpers';\n\nexport default function LoadingBody(props) {\n\tconst group = useRef();\n\tconst mesh = useRef();\n\n\tconst size = [props.diameter / props.SIZE_SCALE, 32, 32];\n\n\tconst position = getPosition(props.aphelion, props.RANDOM_ANGLE, props.DISTANCE_SCALE, props.DISTANCE_OFFSET);\n\n\treturn (\n\t\t<group ref={group} rotation={new THREE.Euler(props.orbitalInclination, 0, 0)}>\n\t\t\t<mesh\n\t\t\t\tref={mesh}\n\t\t\t\tposition={position}\n\t\t\t\trotation={new THREE.Euler(props.axialTilt, 0, 0)}\n\t\t\t\tcastShadow>\n\t\t\t\t<sphereBufferGeometry attach='geometry' args={size} />\n\t\t\t\t<meshStandardMaterial attach='material' color={props.color} />\n\t\t\t</mesh>\n\t\t</group>\n\t);\n}","import React, { useRef, Suspense, useState } from 'react';\nimport { Canvas, extend, useThree, useRender } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport data from './data.json';\nimport Planet from './components/Planet.js';\nimport Sun from './components/Sun.js';\nimport LoadingBody from './components/LoadingBody.js';\n\nextend({ OrbitControls })\nconst Controls = props => {\n\tconst { gl, camera } = useThree();\n\tconst ref = useRef();\n\tuseRender(() => ref.current.update());\n\treturn <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />;\n};\n\nexport function App() {\n\tconst [realisticScale, setToRealisticScale] = useState(true);\n\tconst SIZE_SCALE = 0.00001;\n\tconst SUN_DIAMETER = 1392530;\n\tconst DISTANCE_SCALE = 0.05;\n\tconst DISTANCE_OFFSET = realisticScale ? 250 : 50;\n\tconst constants = {\n\t\trealisticScale,\n\t\tSIZE_SCALE,\n\t\tDISTANCE_SCALE,\n\t\tDISTANCE_OFFSET\n\t};\n\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<div>\n\t\t\t\t<button onClick={() => setToRealisticScale(!realisticScale)}>to {realisticScale ? 'unrealistic' : 'realistic'} scale</button>\n\t\t\t</div>\n\t\t\t<Canvas shadowMap>\n\t\t\t\t<ambientLight intensity={0.1} />\n\t\t\t\t<Controls\n\t\t\t\t\tenableZoom={true}\n\t\t\t\t\tenableDamping\n\t\t\t\t\tdampingFactor={0.2}\n\t\t\t\t\trotateSpeed={0.2}\n\t\t\t\t/>\n\t\t\t\t<Suspense fallback={null}>\n\t\t\t\t\t<Sun\n\t\t\t\t\t\trealisticScale={realisticScale}\n\t\t\t\t\t\tSUN_DIAMETER={SUN_DIAMETER}\n\t\t\t\t\t\tSIZE_SCALE={SIZE_SCALE}\n\t\t\t\t\t/>\n\t\t\t\t</Suspense>\n\t\t\t\t{data.planets.map((planet, index) => {\n\t\t\t\t\tconst RANDOM_ANGLE = Math.random() * Math.PI * 2;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Suspense\n\t\t\t\t\t\t\tkey={planet.name}\n\t\t\t\t\t\t\tfallback={<LoadingBody\n\t\t\t\t\t\t\t\t{...planet}\n\t\t\t\t\t\t\t\t{...constants}\n\t\t\t\t\t\t\t\tRANDOM_ANGLE={RANDOM_ANGLE}\n\t\t\t\t\t\t\t/>}>\n\t\t\t\t\t\t\t<Planet\n\t\t\t\t\t\t\t\t{...planet}\n\t\t\t\t\t\t\t\t{...constants}\n\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\tRANDOM_ANGLE={RANDOM_ANGLE}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Suspense>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Canvas>\n\t\t</div>\n\t);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}