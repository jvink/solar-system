{"version":3,"sources":["App.js","index.js"],"names":["Planet","props","ref","useRef","position","aphelion","size","diameter","useLoader","THREE","image","texture","console","log","useFrame","current","rotation","y","castShadow","attach","args","map","roughness","Sun","fog","distance","color","Camera","selected","camera","useThree","useEffect","fov","set","data","planets","lookAt","updateProjectionMatrix","ReactDOM","render","useState","setSelected","length","style","top","transform","zIndex","margin","onClick","name","right","visibility","shadowMap","intensity","fallback","planet","index","key","document","getElementById"],"mappings":"4PAKA,SAASA,EAAOC,GACf,IAAMC,EAAMC,mBACNC,EAAW,CAAC,EAAG,EAAGH,EAAMI,SAAW,KACnCC,EAAO,CAACL,EAAMM,SAAW,KAAQ,GAAI,IAHrB,EAIJC,YAAUC,gBAAqB,CAAC,WAAD,OAAYR,EAAMS,SAA5DC,EAJe,oBAWtB,OANAC,QAAQC,IAAIP,GAEZQ,aAAS,WACRZ,EAAIa,QAAQC,SAASC,GAAK,OAI1B,0BACCf,IAAKA,EACLE,SAAUA,EACVc,YAAU,GACV,0CAAsBC,OAAO,WAAWC,KAAMd,IAC9C,0CAAsBa,OAAO,WAAWE,IAAKV,EAASW,UAAW,KAKpE,SAASC,IAAO,IAAD,EACIf,YAAUC,gBAAqB,CAAC,oBAA3CE,EADO,oBAId,OACC,0BAAMP,SAAU,CAAC,EAAG,EAAG,IACtB,0CAAsBe,OAAO,WAAWC,KAJ7B,CAAC,QAAU,KAAQ,GAAI,MAKlC,uCAAmBD,OAAO,WAAWE,IAAKV,EAASa,KAAK,IACxD,gCAAYC,SAAU,KAAMC,MAAM,WAKrC,SAASC,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SACTC,EAAWC,cAAXD,OASR,OAPAE,qBAAU,WACTF,EAAOG,IAAM,GACbH,EAAOzB,SAAS6B,IAAIC,EAAKC,QAAQP,GAAUrB,SAAW,KAAO,EAAG2B,EAAKC,QAAQP,GAAUvB,SAAW,KAClGwB,EAAOO,OAAO,EAAG,EAAGF,EAAKC,QAAQP,GAAUvB,SAAW,KACtDwB,EAAOQ,2BACL,CAACR,EAAQD,IAGX,0BAAMxB,SAAU,CAAC,EAAG,EAAG,IACtB,kCC/CHkC,IAASC,OAAO,mBDoDT,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACdZ,EADc,KACJa,EADI,KAGrB,OACC,sCACIb,IAAcM,EAAKC,QAAQO,OAAS,IAAO,yBAAKC,MAAO,CACzDvC,SAAU,WACVwC,IAAK,MACLC,UAAW,mBACXC,OAAQ,KAER,wBAAIH,MAAO,CAAEjB,MAAO,OAAQqB,OAAQ,OAASC,QAAS,kBAAMP,EAAYb,EAAW,KAAKM,EAAKC,QAAQP,EAAW,GAAGqB,SAEpG,IAAbrB,IAAmB,yBAAKe,MAAO,CACjCvC,SAAU,WACVwC,IAAK,MACLM,MAAO,EACPL,UAAW,mBACXM,WAAyB,IAAbvB,EAAiB,SAAW,UACxCkB,OAAQ,KAER,wBAAIH,MAAO,CAAEjB,MAAO,OAAQqB,OAAQ,OAASC,QAAS,kBAAMP,EAAYb,EAAW,KAAKM,EAAKC,QAAQP,EAAW,GAAGqB,OAEpH,kBAAC,IAAD,CAAQG,WAAS,GAChB,kCAAcC,UAAW,KACzB,kBAAC1B,EAAD,CAAQC,SAAUA,IAClB,kBAAC,WAAD,CAAU0B,SAAU,MACnB,kBAAC/B,EAAD,MACCW,EAAKC,QAAQd,KAAI,SAACkC,EAAQC,GAAT,OAAmB,kBAACxD,EAAD,iBAAYuD,EAAZ,CAAoBC,MAAOA,EAAOC,IAAKF,EAAON,gBChFxE,MAASS,SAASC,eAAe,U","file":"static/js/main.b4ea3f5a.chunk.js","sourcesContent":["import React, { useRef, Suspense, useState, useEffect } from \"react\";\nimport { Canvas, useThree, useLoader, useFrame } from \"react-three-fiber\";\nimport * as THREE from 'three';\nimport data from './data.json';\n\nfunction Planet(props) {\n\tconst ref = useRef();\n\tconst position = [0, 0, props.aphelion / 100];\n\tconst size = [props.diameter / 150000, 32, 32];\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/${props.image}`]);\n\tconsole.log(size);\n\t\n\tuseFrame(() => {\n\t\tref.current.rotation.y += 0.01;\n\t});\n\n\treturn (\n\t\t<mesh\n\t\t\tref={ref}\n\t\t\tposition={position}\n\t\t\tcastShadow>\n\t\t\t<sphereBufferGeometry attach=\"geometry\" args={size} />\n\t\t\t<meshStandardMaterial attach=\"material\" map={texture} roughness={1} />\n\t\t</mesh>\n\t);\n}\n\nfunction Sun() {\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/sun.jpg`]);\n\tconst size = [1392530 / 150000, 32, 32];\n\n\treturn (\n\t\t<mesh position={[0, 0, 0]}>\n\t\t\t<sphereBufferGeometry attach=\"geometry\" args={size} />\n\t\t\t<meshBasicMaterial attach=\"material\" map={texture} fog={false} />\n\t\t\t<pointLight distance={6100} color=\"white\" />\n\t\t</mesh>\n\t);\n}\n\nfunction Camera({ selected }) {\n\tconst { camera } = useThree();\n\n\tuseEffect(() => {\n\t\tcamera.fov = 40;\n\t\tcamera.position.set(data.planets[selected].diameter / 36000, 0, data.planets[selected].aphelion / 100);\n\t\tcamera.lookAt(0, 0, data.planets[selected].aphelion / 100);\n\t\tcamera.updateProjectionMatrix();\n\t}, [camera, selected]);\n\n\treturn (\n\t\t<mesh position={[2, 2, 2]}>\n\t\t\t<camera />\n\t\t</mesh>\n\t);\n}\n\nexport function App() {\n\tconst [selected, setSelected] = useState(2);\n\n\treturn (\n\t\t<>\n\t\t\t{!(selected === (data.planets.length - 1)) && <div style={{\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: \"50%\",\n\t\t\t\ttransform: \"translateY(-50%)\",\n\t\t\t\tzIndex: 10\n\t\t\t}}>\n\t\t\t\t<h4 style={{ color: \"#fff\", margin: \"1em\" }} onClick={() => setSelected(selected + 1)}>{data.planets[selected + 1].name}</h4>\n\t\t\t</div>}\n\t\t\t{!(selected === 0) && <div style={{\n\t\t\t\tposition: \"absolute\",\n\t\t\t\ttop: \"50%\",\n\t\t\t\tright: 0,\n\t\t\t\ttransform: \"translateY(-50%)\",\n\t\t\t\tvisibility: selected === 0 ? \"hidden\" : \"visible\",\n\t\t\t\tzIndex: 10\n\t\t\t}}>\n\t\t\t\t<h4 style={{ color: \"#fff\", margin: \"1em\" }} onClick={() => setSelected(selected - 1)}>{data.planets[selected - 1].name}</h4>\n\t\t\t</div>}\n\t\t\t<Canvas shadowMap>\n\t\t\t\t<ambientLight intensity={0.5} />\n\t\t\t\t<Camera selected={selected} />\n\t\t\t\t<Suspense fallback={null}>\n\t\t\t\t\t<Sun />\n\t\t\t\t\t{data.planets.map((planet, index) => <Planet {...planet} index={index} key={planet.name} />)}\n\t\t\t\t</Suspense>\n\t\t\t</Canvas>\n\t\t</>\n\t);\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}