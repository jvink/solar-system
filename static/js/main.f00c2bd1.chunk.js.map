{"version":3,"sources":["components/Body.js","App.js","index.js"],"names":["Body","ppos","index","useLoader","THREE","data","planets","image","texture","position","key","args","r","attach","map","roughness","rings","ring","j","rotation","axialTilt","receiveShadow","max","min","side","color","extend","OrbitControls","Controls","props","useThree","gl","camera","ref","useRef","useRender","current","update","domElement","numberOfPlanets","length","xInitialArray","planet","x","vInitialArray","v","masses","m","xInitial","tf","vInitial","G","SolarSystem","dt","useState","pos","setPos","dtTensor","useMemo","compute","useCallback","a","unstackedX","accelerations","Array","fill","i","iX","jX","vector","force","mul","div","add","sub","calculateAcceleration","newX","newV","array","then","newPos","useEffect","requestAnimationFrame","fallback","ReactDOM","render","className","shadowMap","intensity","enableZoom","enableDamping","dampingFactor","rotateSpeed","document","getElementById"],"mappings":"6XAKe,SAASA,EAAT,GAAgC,IAAhBC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAAS,EAC3BC,YAAUC,gBAAqB,CAAC,WAAD,OAAYC,EAAKC,QAAQJ,GAAOK,SAA1EC,EADsC,oBAG7C,OACC,oCACC,0BAAMC,SAAUR,EAAMS,IAAG,iBAAYR,IACpC,0CACCS,KAAM,CAAW,IAAVT,EAAc,GAA8B,IAAxBG,EAAKC,QAAQJ,GAAOU,EAAS,GAAI,IAC5DC,OAAO,aAER,0CACCC,IAAKN,EACLO,UAAW,EACXF,OAAO,cAGRR,EAAKC,QAAQJ,GAAOc,OAASX,EAAKC,QAAQJ,GAAOc,MAAMF,KAAI,SAACG,EAAMC,GAGlE,OACC,0BACCR,IAAKQ,EACLC,SAAU,IAAIf,QAAYC,EAAKC,QAAQJ,GAAOkB,UALhB,UAKqD,EAAG,GACtFX,SAAUR,EACVoB,eAAa,GACb,wCAAoBR,OAAO,WAAWF,KAAM,CAAY,KAAXM,EAAKK,IAA2B,KAAXL,EAAKM,IAAgB,MACvF,0CAAsBV,OAAO,WAAWW,KAAMpB,aAAkBqB,MAAOpB,EAAKC,QAAQJ,GAAOuB,aCxBjGC,YAAO,CAAEC,oBACT,IAAMC,EAAW,SAAAC,GAAU,IAAD,EACFC,cAAfC,EADiB,EACjBA,GAAIC,EADa,EACbA,OACNC,EAAMC,mBAEZ,OADAC,aAAU,kBAAMF,EAAIG,QAAQC,YACrB,iDAAeJ,IAAKA,EAAKtB,KAAM,CAACqB,EAAQD,EAAGO,aAAiBT,KAG9DU,EAAkBlC,EAAKC,QAAQkC,OAC/BC,EAAgBpC,EAAKC,QAAQQ,KAAI,SAAA4B,GAAM,OAAIA,EAAOC,KAClDC,EAAgBvC,EAAKC,QAAQQ,KAAI,SAAA4B,GAAM,OAAIA,EAAOG,KAClDC,EAASzC,EAAKC,QAAQQ,KAAI,SAAA4B,GAAM,OAAIA,EAAOK,KAE3CC,EAAWC,IAAYR,EAAe,CAACF,EAAiB,IACxDW,EAAWD,IAAYL,EAAe,CAACL,EAAiB,IACxDY,EAAIF,IAAU5C,EAAK8C,GAEzB,SAASC,EAAT,GAAoC,IAAD,IAAZC,UAAY,MAAP,GAAO,IACZC,mBAASb,GADG,mBAC3Bc,EAD2B,KACtBC,EADsB,KAE5Bb,EAAIT,iBAAOc,GACXH,EAAIX,iBAAOgB,GACXO,EAAWC,mBAAQ,kBAAMT,IAAUI,KAAK,CAACA,IACzCM,EAAUC,uBAAY,WAAO,IAAD,EACZX,KAAQ,WAC5B,IAAMY,EAiCT,SAA+BlB,GAI9B,IAHA,IAAMmB,EAAab,IAAWN,GACxBoB,EAAgBC,MAAMzB,GAAiB0B,KAAKhB,IAAY,CAAC,EAAG,EAAG,KAE5DiB,EAAI,EAAGA,EAAI3B,EAAiB2B,IAAK,CAEzC,IADA,IAAMC,EAAKL,EAAWI,GACbhD,EAAIgD,EAAI,EAAGhD,EAAIqB,EAAiBrB,IAAK,CAC7C,IAAMkD,EAAKN,EAAW5C,GAChBmD,EAASpB,IAAOmB,EAAID,GACpBvD,EAAIqC,IAAQoB,GAEZC,EAAQnB,EAAEoB,IAAIzB,EAAOoB,IACzBK,IAAIzB,EAAO5B,IACXsD,IAAIvB,IAAOrC,EAAG,IACd2D,IAAIF,GACNN,EAAcG,GAAKH,EAAcG,GAAGO,IAAIH,GACxCP,EAAc7C,GAAK6C,EAAc7C,GAAGwD,IAAIJ,GAGzCP,EAAcG,GAAKH,EAAcG,GAAGM,IAAI1B,EAAOoB,IAGhD,OAAOjB,IAASc,GAvDJY,CAAsBhC,EAAEP,SAIlC,MAAO,CAHMO,EAAEP,QAAQqC,IAAIxB,IAAOJ,EAAET,QAASqB,IAChCZ,EAAET,QAAQqC,IAAIxB,IAAOY,EAAGJ,QAJL,mBAC1BmB,EAD0B,KACpBC,EADoB,KASjC5B,IAAW,CAACN,EAAEP,QAASS,EAAET,UACzBO,EAAEP,QAAUwC,EACZ/B,EAAET,QAAUyC,EAEZD,EAAKE,QAAQC,MAAK,SAAAC,GACjBxB,EAAOwB,QAEN,CAACrC,EAAGE,EAAGY,IAQV,OANAwB,qBAAU,WACTC,uBAAsB,WACrBvB,SAEC,CAACJ,EAAKI,IAGR,+BACEJ,EAAIzC,KAAI,SAACb,EAAMiE,GAAP,OACR,kBAAC,WAAD,CAAUiB,SAAU,KAAMzE,IAAG,eAAUwD,IACtC,kBAAClE,EAAD,CAAMC,KAAMA,EAAMC,MAAOgE,SCpD9BkB,IAASC,OAAO,mBDoFT,WACN,OACC,yBAAKC,UAAU,QACd,8BAGA,kBAAC,IAAD,CAAQC,WAAS,EAACvD,OAAQ,CAAEvB,SAAU,CAAC,EAAG,EAAG,KAC5C,kBAAC2C,EAAD,MACA,kCAAcoC,UAAW,IACzB,kBAAC,EAAD,CACCC,YAAY,EACZC,eAAa,EACbC,cAAe,GACfC,YAAa,SCjGF,MAASC,SAASC,eAAe,U","file":"static/js/main.f00c2bd1.chunk.js","sourcesContent":["import React from 'react';\nimport data from '../data.json';\nimport { useLoader } from 'react-three-fiber';\nimport * as THREE from 'three';\n\nexport default function Body({ ppos, index }) {\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/${data.planets[index].image}`]);\n\n\treturn (\n\t\t<>\n\t\t\t<mesh position={ppos} key={`planet-${index}`}>\n\t\t\t\t<sphereBufferGeometry\n\t\t\t\t\targs={[index === 0 ? 0.2 : data.planets[index].r * 800, 30, 30]}\n\t\t\t\t\tattach=\"geometry\"\n\t\t\t\t/>\n\t\t\t\t<meshStandardMaterial\n\t\t\t\t\tmap={texture}\n\t\t\t\t\troughness={1}\n\t\t\t\t\tattach=\"material\"\n\t\t\t\t/>\n\t\t\t</mesh>\n\t\t\t{data.planets[index].rings && data.planets[index].rings.map((ring, j) => {\n\t\t\t\tconst NINETY_DEGREES_IN_EULER = 1.5707963;\n\n\t\t\t\treturn (\n\t\t\t\t\t<mesh\n\t\t\t\t\t\tkey={j}\n\t\t\t\t\t\trotation={new THREE.Euler(data.planets[index].axialTilt + NINETY_DEGREES_IN_EULER, 0, 0)}\n\t\t\t\t\t\tposition={ppos}\n\t\t\t\t\t\treceiveShadow>\n\t\t\t\t\t\t<ringBufferGeometry attach='geometry' args={[ring.max * 0.000003, ring.min * 0.000003, 32]} />\n\t\t\t\t\t\t<meshPhysicalMaterial attach='material' side={THREE.DoubleSide} color={data.planets[index].color} />\n\t\t\t\t\t</mesh>\n\t\t\t\t)\n\t\t\t})}\n\t\t</>\n\t);\n}","import React, { useRef, Suspense, useState, useCallback, useMemo, useEffect } from 'react';\nimport { Canvas, extend, useThree, useRender } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport * as tf from '@tensorflow/tfjs';\nimport data from './data.json';\nimport Body from './components/Body.js';\n\nextend({ OrbitControls })\nconst Controls = props => {\n\tconst { gl, camera } = useThree();\n\tconst ref = useRef();\n\tuseRender(() => ref.current.update());\n\treturn <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />;\n};\n\nconst numberOfPlanets = data.planets.length;\nconst xInitialArray = data.planets.map(planet => planet.x);\nconst vInitialArray = data.planets.map(planet => planet.v);\nconst masses = data.planets.map(planet => planet.m);\n\nconst xInitial = tf.tensor2d(xInitialArray, [numberOfPlanets, 3]);\nconst vInitial = tf.tensor2d(vInitialArray, [numberOfPlanets, 3]);\nconst G = tf.scalar(data.G);\n\nfunction SolarSystem({ dt = 0.1 }) {\n\tconst [pos, setPos] = useState(xInitialArray);\n\tconst x = useRef(xInitial);\n\tconst v = useRef(vInitial);\n\tconst dtTensor = useMemo(() => tf.scalar(dt), [dt]);\n\tconst compute = useCallback(() => {\n\t\tconst [newX, newV] = tf.tidy(() => {\n\t\t\tconst a = calculateAcceleration(x.current);\n\t\t\tconst newX = x.current.add(tf.mul(v.current, dtTensor));\n\t\t\tconst newV = v.current.add(tf.mul(a, dtTensor));\n\n\t\t\treturn [newX, newV];\n\t\t});\n\n\t\ttf.dispose([x.current, v.current]);\n\t\tx.current = newX;\n\t\tv.current = newV;\n\n\t\tnewX.array().then(newPos => {\n\t\t\tsetPos(newPos);\n\t\t});\n\t}, [x, v, dtTensor]);\n\n\tuseEffect(() => {\n\t\trequestAnimationFrame(() => {\n\t\t\tcompute();\n\t\t});\n\t}, [pos, compute]);\n\n\treturn (\n\t\t<group>\n\t\t\t{pos.map((ppos, i) => (\n\t\t\t\t<Suspense fallback={null} key={`body-${i}`}>\n\t\t\t\t\t<Body ppos={ppos} index={i} />\n\t\t\t\t</Suspense>\n\t\t\t))}\n\t\t</group>\n\t);\n}\n\nfunction calculateAcceleration(x) {\n\tconst unstackedX = tf.unstack(x);\n\tconst accelerations = Array(numberOfPlanets).fill(tf.tensor1d([0, 0, 0]));\n\n\tfor (let i = 0; i < numberOfPlanets; i++) {\n\t\tconst iX = unstackedX[i];\n\t\tfor (let j = i + 1; j < numberOfPlanets; j++) {\n\t\t\tconst jX = unstackedX[j];\n\t\t\tconst vector = tf.sub(jX, iX);\n\t\t\tconst r = tf.norm(vector);\n\n\t\t\tconst force = G.mul(masses[i])\n\t\t\t\t.mul(masses[j])\n\t\t\t\t.div(tf.pow(r, 3))\n\t\t\t\t.mul(vector);\n\t\t\taccelerations[i] = accelerations[i].add(force);\n\t\t\taccelerations[j] = accelerations[j].sub(force);\n\t\t}\n\n\t\taccelerations[i] = accelerations[i].div(masses[i]);\n\t}\n\n\treturn tf.stack(accelerations);\n}\n\nexport function App() {\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<div>\n\t\t\t\t\n\t\t\t</div>\n\t\t\t<Canvas shadowMap camera={{ position: [2, 0, 0] }}>\n\t\t\t\t<SolarSystem />\n\t\t\t\t<ambientLight intensity={1} />\n\t\t\t\t<Controls\n\t\t\t\t\tenableZoom={true}\n\t\t\t\t\tenableDamping\n\t\t\t\t\tdampingFactor={0.2}\n\t\t\t\t\trotateSpeed={0.2}\n\t\t\t\t/>\n\t\t\t</Canvas>\n\t\t</div>\n\t);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}