{"version":3,"sources":["helpers.js","components/Planet.js","components/Sun.js","components/LoadingBody.js","App.js","index.js"],"names":["getPosition","aphelion","randomAngle","distanceScale","Math","cos","sin","Planet","props","group","useRef","mesh","size","diameter","SIZE_SCALE","useLoader","THREE","image","texture","position","RANDOM_ANGLE","DISTANCE_SCALE","useFrame","current","rotation","y","orbitalPeriod","rotationPeriod","ref","orbitalInclination","axialTilt","castShadow","receiveShadow","attach","args","map","roughness","rings","ring","index","key","max","min","side","color","Sun","fog","LoadingBody","extend","OrbitControls","Controls","useThree","gl","camera","useRender","update","domElement","ReactDOM","render","shadowMap","intensity","enableZoom","enableDamping","dampingFactor","rotateSpeed","fallback","data","planets","planet","random","PI","name","document","getElementById"],"mappings":"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","file":"static/js/main.6c2e0c18.chunk.js","sourcesContent":["export function getPosition(aphelion, randomAngle, distanceScale) {\n\tconst x = Math.cos(randomAngle) * aphelion;\n\tconst z = Math.sin(randomAngle) * aphelion;\n\n\treturn [x * distanceScale, 0, z * distanceScale];\n}","import React, { useRef } from 'react';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { getPosition } from '../helpers';\n\nexport default function Planet(props) {\n\tconst group = useRef();\n\tconst mesh = useRef();\n\n\tconst size = [props.diameter * props.SIZE_SCALE, 32, 32];\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/${props.image}`]);\n\n\tconst position = getPosition(props.aphelion, props.RANDOM_ANGLE, props.DISTANCE_SCALE);\n\n\tuseFrame(() => {\n\t\tgroup.current.rotation.y += 1 / props.orbitalPeriod;\n\t\tmesh.current.rotation.y += 1 / props.rotationPeriod;\n\t});\n\n\treturn (\n\t\t<group ref={group} rotation={new THREE.Euler(props.orbitalInclination, 0, 0)}>\n\t\t\t<mesh\n\t\t\t\tref={mesh}\n\t\t\t\tposition={position}\n\t\t\t\trotation={new THREE.Euler(props.axialTilt, 0, 0)}\n\t\t\t\tcastShadow\n\t\t\t\treceiveShadow>\n\t\t\t\t<sphereBufferGeometry attach='geometry' args={size} />\n\t\t\t\t<meshStandardMaterial attach='material' map={texture} roughness={1} />\n\t\t\t</mesh>\n\t\t\t{props.rings && props.rings.map((ring, index) => {\n\t\t\t\tconst NINETY_DEGREES_IN_EULER = 1.5707963;\n\n\t\t\t\treturn (\n\t\t\t\t\t<mesh\n\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\trotation={new THREE.Euler(props.axialTilt + NINETY_DEGREES_IN_EULER, 0, 0)}\n\t\t\t\t\t\tposition={position}\n\t\t\t\t\t\treceiveShadow>\n\t\t\t\t\t\t<ringBufferGeometry attach='geometry' args={[ring.max * props.SIZE_SCALE, ring.min * props.SIZE_SCALE, 32]} />\n\t\t\t\t\t\t<meshPhysicalMaterial attach='material' side={THREE.DoubleSide} color={props.color} />\n\t\t\t\t\t</mesh>\n\t\t\t\t)\n\t\t\t})}\n\t\t</group>\n\t);\n}","import React from 'react';\nimport { useLoader } from 'react-three-fiber';\nimport * as THREE from 'three';\n\nexport default function Sun() {\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/sun.jpg`]);\n\tconst size = [1392530 / 150000, 32, 32];\n\n\treturn (\n\t\t<mesh position={[0, 0, 0]}>\n\t\t\t<sphereBufferGeometry attach='geometry' args={size} />\n\t\t\t<meshBasicMaterial attach='material' map={texture} fog={false} />\n\t\t\t<pointLight castShadow color='white' />\n\t\t</mesh>\n\t);\n}","import React, { useRef } from 'react';\nimport * as THREE from 'three';\nimport { getPosition } from '../helpers';\n\nexport default function LoadingBody(props) {\n\tconst group = useRef();\n\tconst mesh = useRef();\n\n\tconst size = [props.diameter / props.SIZE_SCALE, 32, 32];\n\n\tconst position = getPosition(props.aphelion, props.RANDOM_ANGLE, props.DISTANCE_SCALE);\n\n\treturn (\n\t\t<group ref={group} rotation={new THREE.Euler(props.orbitalInclination, 0, 0)}>\n\t\t\t<mesh\n\t\t\t\tref={mesh}\n\t\t\t\tposition={position}\n\t\t\t\trotation={new THREE.Euler(props.axialTilt, 0, 0)}\n\t\t\t\tcastShadow>\n\t\t\t\t<sphereBufferGeometry attach='geometry' args={size} />\n\t\t\t\t<meshStandardMaterial attach='material' color={props.color} />\n\t\t\t</mesh>\n\t\t</group>\n\t);\n}","import React, { useRef, Suspense } from 'react';\nimport { Canvas, extend, useThree, useRender } from 'react-three-fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport data from './data.json';\nimport Planet from './components/Planet.js';\nimport Sun from './components/Sun.js';\nimport LoadingBody from './components/LoadingBody.js';\n\nextend({ OrbitControls })\nconst Controls = props => {\n\tconst { gl, camera } = useThree();\n\tconst ref = useRef();\n\tuseRender(() => ref.current.update());\n\treturn <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />;\n};\n\nexport function App() {\n\tconst SIZE_SCALE = 0.0000075;\n\tconst DISTANCE_SCALE = 0.15;\n\n\treturn (\n\t\t<Canvas shadowMap>\n\t\t\t<ambientLight intensity={0.1} />\n\t\t\t<Controls\n\t\t\t\tenableZoom={true}\n\t\t\t\tenableDamping\n\t\t\t\tdampingFactor={0.2}\n\t\t\t\trotateSpeed={0.2}\n\t\t\t/>\n\t\t\t<Suspense fallback={null}>\n\t\t\t\t<Sun />\n\t\t\t</Suspense>\n\t\t\t{data.planets.map((planet, index) => {\n\t\t\t\tconst RANDOM_ANGLE = Math.random() * Math.PI * 2;\n\n\t\t\t\treturn (\n\t\t\t\t\t<Suspense\n\t\t\t\t\t\tkey={planet.name}\n\t\t\t\t\t\tfallback={<LoadingBody\n\t\t\t\t\t\t\t{...planet}\n\t\t\t\t\t\t\tRANDOM_ANGLE={RANDOM_ANGLE}\n\t\t\t\t\t\t\tSIZE_SCALE={SIZE_SCALE}\n\t\t\t\t\t\t\tDISTANCE_SCALE={DISTANCE_SCALE}\n\t\t\t\t\t\t/>}>\n\t\t\t\t\t\t<Planet\n\t\t\t\t\t\t\t{...planet}\n\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\tRANDOM_ANGLE={RANDOM_ANGLE}\n\t\t\t\t\t\t\tSIZE_SCALE={SIZE_SCALE}\n\t\t\t\t\t\t\tDISTANCE_SCALE={DISTANCE_SCALE}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Suspense>\n\t\t\t\t)\n\t\t\t})}\n\t\t</Canvas>\n\t);\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}