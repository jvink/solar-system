{"version":3,"sources":["App.js","index.js"],"names":["extend","OrbitControls","Controls","props","useThree","gl","camera","ref","useRef","useRender","current","update","args","domElement","Planet","group","mesh","size","diameter","useLoader","THREE","image","texture","randomAngle","Math","random","PI","x","cos","aphelion","z","sin","position","useMemo","useFrame","rotation","y","orbitalPeriod","rotationPeriod","orbitalInclination","axialTilt","castShadow","attach","map","roughness","name","side","color","Sun","fog","distance","ReactDOM","render","shadowMap","intensity","enableZoom","enableDamping","dampingFactor","rotateSpeed","fallback","data","planets","planet","index","key","document","getElementById"],"mappings":"wqEAMAA,YAAO,CAAEC,oBACT,IAAMC,EAAW,SAAAC,GAAU,IAAD,EACFC,cAAfC,EADiB,EACjBA,GAAIC,EADa,EACbA,OACNC,EAAMC,mBAEZ,OADAC,aAAU,kBAAMF,EAAIG,QAAQC,YACrB,iDAAeJ,IAAKA,EAAKK,KAAM,CAACN,EAAQD,EAAGQ,aAAiBV,KAGpE,SAASW,EAAOX,GACf,IAAMY,EAAQP,mBACRQ,EAAOR,mBAEPS,EAAO,CAACd,EAAMe,SAAW,KAAQ,GAAI,IAJrB,EAKJC,YAAUC,gBAAqB,CAAC,WAAD,OAAYjB,EAAMkB,SAA5DC,EALe,oBAOhBC,EAAcC,KAAKC,SAAWD,KAAKE,GAAK,EACxCC,EAAIH,KAAKI,IAAIL,GAAepB,EAAM0B,SAClCC,EAAIN,KAAKO,IAAIR,GAAepB,EAAM0B,SAElCG,EAAWC,mBAAQ,iBAAM,CAACN,EAAI,GAAI,EAAGG,EAAI,MAAK,CAACH,EAAGG,IAOxD,OALAI,aAAS,WACRnB,EAAML,QAAQyB,SAASC,GAAK,EAAIjC,EAAMkC,cACtCrB,EAAKN,QAAQyB,SAASC,GAAK,EAAIjC,EAAMmC,kBAIrC,2BAAO/B,IAAKQ,EAAOoB,SAAU,IAAIf,QAAYjB,EAAMoC,mBAAoB,EAAG,IACzE,0BACChC,IAAKS,EACLgB,SAAUA,EACVG,SAAU,IAAIf,QAAYjB,EAAMqC,UAAW,EAAG,GAC9CC,YAAU,GACV,0CAAsBC,OAAO,WAAW9B,KAAMK,IAC9C,0CAAsByB,OAAO,WAAWC,IAAKrB,EAASsB,UAAW,KAElD,WAAfzC,EAAM0C,MAAqB,0BAC3BV,SAAU,IAAIf,QAAYjB,EAAMqC,UAAY,UAAW,EAAG,GAC1DC,YAAU,EACVT,SAAUA,GACV,wCAAoBU,OAAO,WAAW9B,KAAM,CAAC,IAAK,EAAG,MACrD,0CAAsB8B,OAAO,WAAWI,KAAM1B,aAAkB2B,MAAO5C,EAAM4C,UAMjF,SAASC,IAAO,IAAD,EACI7B,YAAUC,gBAAqB,CAAC,oBAA3CE,EADO,oBAId,OACC,0BAAMU,SAAU,CAAC,EAAG,EAAG,IACtB,0CAAsBU,OAAO,WAAW9B,KAJ7B,CAAC,QAAmB,GAAI,MAKnC,uCAAmB8B,OAAO,WAAWC,IAAKrB,EAAS2B,KAAK,IACxD,gCAAYC,SAAU,KAAMH,MAAM,WCxDrCI,IAASC,OAAO,mBD6DT,WACN,OACC,kBAAC,IAAD,CAAQC,WAAS,GAChB,kCAAcC,UAAW,KACzB,kBAAC,EAAD,CACCC,YAAY,EACZC,eAAa,EACbC,cAAe,GACfC,YAAa,KAEd,kBAAC,WAAD,CAAUC,SAAU,MACnB,kBAACX,EAAD,MACCY,EAAKC,QAAQlB,KAAI,SAACmB,EAAQC,GAAT,OAAmB,kBAACjD,EAAD,iBAAYgD,EAAZ,CAAoBC,MAAOA,EAAOC,IAAKF,EAAOjB,eCzEvE,MAASoB,SAASC,eAAe,W","file":"static/js/main.12cfc60a.chunk.js","sourcesContent":["import React, { useRef, Suspense, useMemo } from \"react\";\nimport { Canvas, useLoader, useFrame, extend, useThree, useRender } from \"react-three-fiber\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nimport * as THREE from 'three';\nimport data from './data.json';\n\nextend({ OrbitControls })\nconst Controls = props => {\n\tconst { gl, camera } = useThree();\n\tconst ref = useRef();\n\tuseRender(() => ref.current.update());\n\treturn <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />;\n};\n\nfunction Planet(props) {\n\tconst group = useRef();\n\tconst mesh = useRef();\n\n\tconst size = [props.diameter / 150000, 32, 32];\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/${props.image}`]);\n\n\tconst randomAngle = Math.random() * Math.PI * 2;\n\tconst x = Math.cos(randomAngle) * props.aphelion;\n\tconst z = Math.sin(randomAngle) * props.aphelion;\n\n\tconst position = useMemo(() => [x / 50, 0, z / 50], [x, z]);\n\n\tuseFrame(() => {\n\t\tgroup.current.rotation.y += 1 / props.orbitalPeriod;\n\t\tmesh.current.rotation.y += 1 / props.rotationPeriod;\n\t});\n\t\n\treturn (\n\t\t<group ref={group} rotation={new THREE.Euler(props.orbitalInclination, 0, 0)}>\n\t\t\t<mesh\n\t\t\t\tref={mesh}\n\t\t\t\tposition={position}\n\t\t\t\trotation={new THREE.Euler(props.axialTilt, 0, 0)}\n\t\t\t\tcastShadow>\n\t\t\t\t<sphereBufferGeometry attach=\"geometry\" args={size} />\n\t\t\t\t<meshStandardMaterial attach=\"material\" map={texture} roughness={1} />\n\t\t\t</mesh>\n\t\t\t{props.name === \"Saturn\" && <mesh\n\t\t\t\trotation={new THREE.Euler(props.axialTilt + 1.5707963, 0, 0)}\n\t\t\t\tcastShadow\n\t\t\t\tposition={position}>\n\t\t\t\t<ringBufferGeometry attach=\"geometry\" args={[1.4, 1, 32]} />\n\t\t\t\t<meshStandardMaterial attach=\"material\" side={THREE.DoubleSide} color={props.color} />\n\t\t\t</mesh>}\n\t\t</group>\n\t);\n}\n\nfunction Sun() {\n\tconst [texture] = useLoader(THREE.TextureLoader, [`planets/sun.jpg`]);\n\tconst size = [1392530 / 2500000, 32, 32];\n\n\treturn (\n\t\t<mesh position={[0, 0, 0]}>\n\t\t\t<sphereBufferGeometry attach=\"geometry\" args={size} />\n\t\t\t<meshBasicMaterial attach=\"material\" map={texture} fog={false} />\n\t\t\t<pointLight distance={6100} color=\"white\" />\n\t\t</mesh>\n\t);\n}\n\nexport function App() {\n\treturn (\n\t\t<Canvas shadowMap>\n\t\t\t<ambientLight intensity={0.2} />\n\t\t\t<Controls\n\t\t\t\tenableZoom={true}\n\t\t\t\tenableDamping\n\t\t\t\tdampingFactor={0.2}\n\t\t\t\trotateSpeed={0.2}\n\t\t\t/>\n\t\t\t<Suspense fallback={null}>\n\t\t\t\t<Sun />\n\t\t\t\t{data.planets.map((planet, index) => <Planet {...planet} index={index} key={planet.name} />)}\n\t\t\t</Suspense>\n\t\t</Canvas>\n\t);\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}